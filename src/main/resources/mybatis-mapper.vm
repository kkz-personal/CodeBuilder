<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="${tdo.packageName}.dao.${tdo.name}Repository">
#set($isAutoIncremented = false)
#foreach($column in $tdo.columns)
	#if($column.autoIncremented)
		#set($keyColumn = $column)
		#set($isAutoIncremented = true)
	#end
#end
#if(!$isAutoIncremented)
	#foreach($column in $tdo.columns)
		#set($keyColumn = $column)
	#end
#end

    <!-- CodeBuilder  Generated-->
  <resultMap id="${tdo.name}Map" type="${tdo.packageName}.bo.${tdo.name}">
  	#foreach($column in $tdo.columns)
		#if($column.autoIncremented)
		 <id column="${column.databaseFieldName}" property="${column.fieldName}" jdbcType="${column.jdbcType}" />
		#else
		<result column="${column.databaseFieldName}" property="${column.fieldName}" jdbcType="${column.jdbcType}" />
		#end
	#end
  </resultMap>
  <sql id="Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
  <sql id="Table_Name">${tdo.tableName}</sql>
	<sql id="Base_Column_List_Without_Id">
  	#set($index = 1)
  	#set($count = $tdo.columns.size())
  	#foreach($column in $tdo.columns)
		#if(!$column.autoIncremented)
			${column.databaseFieldName} #if($index < $count),#end
		#end
		#set($index = $index+1)
	#end
  </sql>
  <sql id="Base_Column_List">
  	#foreach($column in $tdo.columns)
  		#if($column.autoIncremented)
			${column.databaseFieldName} ,
		#end
	#end
	<include refid="Base_Column_List_Without_Id"/>
  </sql>
    <sql id="Insert_Columns">
     #foreach($column in $tdo.columns)
		#if(!$column.autoIncremented)
		<if test="record.${column.fieldName} != null">${column.databaseFieldName},</if>
		#end
	#end
    </sql>
    <sql id="Insert_Values">
    #foreach($column in $tdo.columns)
		#if(!$column.autoIncremented)
		<if test="record.${column.fieldName} != null">#{record.${column.fieldName},jdbcType=${column.jdbcType}},</if>
		#end
	#end
    </sql>
    <sql id="Batch_Insert_Values">
	#foreach($column in $tdo.columns)
		#if(!$column.autoIncremented)
		 #{record.${column.fieldName},jdbcType=${column.jdbcType}},
		 #end
	#end
    </sql>
	<sql id="Batch_Insert_Values_On_DuplicateKey">
		#foreach($column in $tdo.columns)
			#if($column.autoIncremented)
				#{record.${column.fieldName},jdbcType=${column.jdbcType}},
			#end
		#end
		<include refid="Batch_Insert_Values"/>
	</sql>
    <sql id="Update_Set_From_Bean">
	 #foreach($column in $tdo.columns)
		#if(!$column.autoIncremented)
		<if test="record.${column.fieldName} != null">${column.databaseFieldName} = #{record.${column.fieldName},jdbcType=${column.jdbcType}} ,</if>
		#end
	#end
    </sql>
	<!-- insert -->
	<insert id="insert" parameterType="java.util.Map">
		#if($isAutoIncremented)
		<selectKey resultType="${keyColumn.fieldTypeAlias}" keyProperty="record.${keyColumn.fieldName}" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
		#end
        insert into <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Insert_Columns"/>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <include refid="Insert_Values"/>
        </trim>
    </insert>
    <insert id="batchInsert" parameterType="java.util.Map">
        insert into <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Base_Column_List_Without_Id"/>
        </trim>
        values
        <foreach collection="records" item="record" index="index" separator=",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
                <include refid="Batch_Insert_Values"/>
            </trim>
        </foreach>
    </insert>
	<insert id="batchInsertOnDuplicateKey" parameterType="java.util.Map">
		insert into <include refid="Table_Name"/>
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<include refid="Base_Column_List"/>
		</trim>
		values
		<foreach collection="records" item="record" index="index" separator=",">
			<trim prefix="(" suffix=")" suffixOverrides=",">
				<include refid="Batch_Insert_Values_On_DuplicateKey"/>
			</trim>
		</foreach>
		ON DUPLICATE KEY UPDATE
		#set($index = 1)
		#foreach($column in $tdo.columns)
			#if(!$column.autoIncremented || ($column.id != $keyColumn.id))
				${column.databaseFieldName} = VALUES(${column.databaseFieldName})  #if($index < $count), #end
			#end
			#set($index = $index+1)
		#end
	</insert>
	<!-- end insert -->
    <!-- delete -->
    <delete id="deleteById" parameterType="java.util.Map">
        delete from <include refid="Table_Name"/> where ${keyColumn.databaseFieldName} = #{id,jdbcType=${keyColumn.jdbcType}}
    </delete>
    <delete id="deleteByExample" parameterType="java.util.Map">
        delete from <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <delete id="deleteIn" parameterType="java.util.Map">
        delete from <include refid="Table_Name"/> where ${keyColumn.databaseFieldName} in
        <foreach collection="records" item="record" index="index" open="(" separator="," close=")">
			#{record.${keyColumn.fieldName},jdbcType=${keyColumn.jdbcType}}
		</foreach>
    </delete>
    <!-- end delete -->
    <!-- update -->
	<update id="updateById" parameterType="java.util.Map">
        update <include refid="Table_Name"/>
        <set>
            <include refid="Update_Set_From_Bean"/>
        </set>
		where ${keyColumn.databaseFieldName} = #{record.${keyColumn.fieldName},jdbcType=${keyColumn.jdbcType}}
	</update>
    <update id="updateByExample" parameterType="java.util.Map">
        update <include refid="Table_Name"/>
        <set>
            <include refid="Update_Set_From_Bean"/>
        </set>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </update>
    <update id="batchUpdate" parameterType="java.util.Map">
        <foreach collection="records" item="record" index="index" open="" close="" separator=";">
            update <include refid="Table_Name"/>
            <set>
            	<include refid="Update_Set_From_Bean"/>
            </set>
			where ${keyColumn.databaseFieldName}=#{record.${keyColumn.fieldName},jdbcType=${keyColumn.jdbcType}}
		</foreach>
    </update>
	 <!-- end update -->
    <!-- select -->
    <select id="selectById" resultMap="${tdo.name}Map" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from <include refid="Table_Name"/>
        where ${keyColumn.databaseFieldName} = #{id,jdbcType=${keyColumn.jdbcType}}
    </select>
    <select id="selectByExample" resultMap="${tdo.name}Map" parameterType="java.util.Map">
      select
      <if test="example != null and example.distinct">
        distinct
      </if>
      <include refid="Base_Column_List"/>
      from <include refid="Table_Name"/>
      <if test="example != null">
        <include refid="Example_Where_Clause"/>
      </if>
      <if test="example != null and example.orderByClause != null">
        order by ${example.orderByClause}
      </if>
    </select>
    <select id="selectOneByExample" resultMap="${tdo.name}Map" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from <include refid="Table_Name"/>
		<if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
      <if test="example != null and example.orderByClause != null">
        order by ${example.orderByClause}
      </if>
        limit 1
    </select>
    <select id="selectIn" resultMap="${tdo.name}Map" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from <include refid="Table_Name"/>
        where ${keyColumn.databaseFieldName} IN
        <foreach collection="records" item="record" index="index" open="(" separator="," close=")">
			#{record.${keyColumn.fieldName},jdbcType=${keyColumn.jdbcType}}
		</foreach>
    </select>
    <select id="countByExample" resultType="java.lang.Integer" parameterType="java.util.Map">
        select count(*) as total from <include refid="Table_Name"/>
       <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="countByPager" resultType="java.lang.Integer" parameterType="java.util.Map">
        select count(*) as total from <include refid="Table_Name"/>
		<if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="selectByPager" resultMap="${tdo.name}Map" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="pager.sortItem != null and pager.sortItem != '' ">
            order by ${pager.sortItem} ${pager.sortType}
        </if>
        limit #{pager.startIndex} , #{pager.pageSize}
    </select>
	 <!-- end select -->
    <!-- My Custom Interfaces -->
</mapper>
